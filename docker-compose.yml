services:
  postgres:
    image: postgres:15
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
  graphql-engine:
    image: hasura/graphql-engine:v2.37.0
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "naming_convention"
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    depends_on:
      data-connector-agent:
        condition: service_healthy
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.37.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s

  firebase:
    container_name: firebase
    build:
      context: .
      dockerfile: ./functions/Dockerfile
    working_dir: /opt/firebase
    command: sh -c "cd ./functions && npm run build:watch & firebase emulators:start --only functions,auth,firestore --import=./functions/.data/export_my_data --export-on-exit=./functions/.data/export_my_data"
    volumes:
      - ./functions:/opt/firebase/functions
      - ./functions/firebase.json:/opt/firebase/firebase.json
      - ./functions/.firebaserc:/opt/firebase/.firebaserc
      # ログイン情報をキャッシュするために以下の設定を有効にする
      - ./functions/.bin/:/root/.cache:cached
      - ./functions/.config/:/root/.config:cached
      # ローカルデータのexport
      - ./functions/.data:/opt/firebase/functions/.data

    ports:
      - 9099:9099 # Firebase Authentication
      - 5001:5001 # Clound Functions
      - 5002:5002 # Cloud Firestore
      - 4000:4000 # Emulator Suite UI
    # environment:
    #   FIREBASE_PROJECT_ID: next-hasura-tdd-stg

  app_dev:
    container_name: app_dev
    build:
      context: .
      dockerfile: ./app/Dockerfile
    working_dir: /app
    volumes:
      - ./app:/app
      - ./app/node_modules:/app/node_modules
    ports:
      - 3000:3000
    tty: true
    stdin_open: true

volumes:
  node_modules: #TODO: この指定あってる？
  db_data:
